# -*- coding: utf-8 -*-
"""bharat_internshp_task2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ruFeWjt-7ddE_Vs6Ob188EfZOntTP5oI
"""

from sklearn.datasets import fetch_california_housing
import pandas as pd

california_housing = fetch_california_housing()
df= pd.DataFrame(data=california_housing.data, columns=california_housing.feature_names)
df['target'] = california_housing.target
df

df.info

print("Null Values in the Dataset:")
print(df.isnull().sum())

df.columns=[1,2,3,4,5,6,7,8,9]
df

x=df.iloc[:,0:8]
y=df.iloc[:,8]
y

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(11, 4))
x.hist(bins=10, figsize=(11, 4), color='black', edgecolor='red')
plt.suptitle("Histograms ", y=1.4)
plt.show()

plt.figure(figsize=(11, 4))
data_with_target = pd.concat([x, y], axis=1)
correl_matrix = data_with_target.corr()
sns.heatmap(correl_matrix, annot=True, cmap='gist_heat', linewidths=.3)
plt.title("Correlational Heatmap")
plt.show()

fig, ax = plt.subplots(figsize=(11, 4))
scatter_matrix = pd.plotting.scatter_matrix(df.iloc[:, :4], c=df[5], marker='+', cmap='gist_heat', ax=ax)
plt.suptitle("Scatter Plot Matrix of Features Colored by Target Variable", y=1.4)
plt.show()

fig = plt.figure(figsize=(7, 7))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df[2], df[4], df[6], c=df[6], cmap='gist_heat', marker='+')
ax.set_xlabel('x-axis')
ax.set_ylabel('y-axis')
ax.set_zlabel('Target-axis')
plt.title("3D Scatter Plot Representation")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=52)
knn_regressor = KNeighborsRegressor(n_neighbors=5)

knn_regressor.fit(x_train, y_train)
y_pred = knn_regressor.predict(x_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.4f}")
print(f"R-squared: {r2:.4f}")

plt.barh(y_test, y_pred, alpha=0.7,color='black',edgecolor='red')
plt.xlabel("Actual values")
plt.ylabel("Predicted Values")
plt.title("variations in actual and predicted values")
plt.show()